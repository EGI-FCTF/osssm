#! /usr/bin/env python
"""
usage:  osssm.extract

purpose:
 * implements Openstack accounting extractor
 
comments:
 * extract data using Openstack Nova API
 * configured with /etc/osssmrc
 * outputs logging into the file configured as "logfile_path"
 * spool data to "spoolfile_path" for further use by osssm.push
"""

import ConfigParser
import os
import sys
import logging
import copy

sys.path.append('/usr/share/pyshared')
from osssm import *


# parse configuration file
conf = ConfigParser.ConfigParser()
conf.read( [ '/etc/osssmrc', os.path.expanduser('~/.osssmrc') ] )
config = {}
for item in ( 
    'user',
    'password',
    'keystone_api_url', 
    'logfile_path', 
    'debug_level', 
    'tenants', 
    'gocdb_sitename', 
    'zone_name', 
    'cloud_type',
    'spoolfile_path',
    'ssm_input_header', 
    'ssm_input_sep', 
    'ssm_input_path' 
    ):
    config[item] = conf.get( 'Main', item )

# setup logging
debugLevels = { 'INFO': logging.INFO, 'DEBUG': logging.DEBUG }
logging.basicConfig( filename=os.path.expanduser(config['logfile_path']), filemode='a', level=debugLevels[config['debug_level']], format="%(asctime)s %(levelname)s %(message)s", datefmt='%c')
logging.info('extraction of records started')
loggedconf = copy.copy(config)
# do not log tokens
loggedconf['password'] = dummy
logging.debug( 'configuration: %s' % pprint.pformat( loggedconf ) )


# get spooled urs
spooled_urs = get_spooled_urs( config )

# loop over configured tenants
extract = {}
tenants = config['tenants'].split(',')
for tenant in tenants:

    (url, token, tenant_id) = get_access_details(config['keystone_api_url'] ,config['user'], config['password'], tenant)
    if url == None or token == None or tenant_id == None:
        logging.error("skipping tenant <%s> usage records" % tenant)
        continue
    urlp = urlparse.urlparse( url )
    url = urlp[1]
    url_path = urlp[2]
    headers = { "X-Auth-Token": token, "Content-type":"application/json" }
    conn = httplib.HTTPConnection( url )
    logging.debug('initiating connection to %s' % url)

    logging.debug( 'extracting accounting for tenant %s' % tenant )

    # get instances usages
    period_start = time.strftime( stu_date_format, time.gmtime(0))
    logging.debug( 'extracting records since: %s' % period_start )
    usages = get_json_response( conn, "%s/os-simple-tenant-usage/%s" % ( url_path, tenant_id ), { "start": period_start }, headers )

    # get instances details
    details = get_json_response( conn, "%s/servers/detail" % url_path, {}, headers ) 

    # get images ids/names available to that user
    images = get_images_ids( conn, tenant_id, details, headers, url_path )

    # translate ids
    if len(usages['tenant_usage']) != 0 and len(details['servers']) != 0:
        extract.update( compute_extract( usages, details, config, images, tenant, spooled_urs ) )
    else:
        logging.info('no usage records for tenant <%s>' % tenant)


logging.debug('closing connection')
conn.close()

# merge to spooled usage records
merged = merge_records( extract, config )

# write usage records to spool file
write_to_spool( merged, config )
