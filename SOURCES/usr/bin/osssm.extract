#! /usr/bin/env python
"""
usage:  osssm.extract

purpose:
 * implements Openstack accounting extractor
 
comments:
 * extract data using Openstack Nova API
 * configured with /etc/osssmrc
 * outputs logging into the file configured as "logfile_path"
 * spool data to "spooldir_path" for further use by osssm.push
"""

import ConfigParser
import datetime
import os
import sys
import logging
import copy
import pprint

sys.path.append('/usr/share/pyshared')
from osssm import *


# parse configuration file
conf = ConfigParser.ConfigParser()
conf.read( [ '/etc/osssmrc', os.path.expanduser('~/.osssmrc') ] )
config = {}
for item in ( 
    'user',
    'password',
    'keystone_api_url', 
    'logfile_path', 
    'debug_level', 
    'tenants', 
    'gocdb_sitename', 
    'cloud_type',
    'spooldir_path',
    'ssm_input_header', 
    'ssm_input_sep', 
    'ssm_input_path',
    'voms_tenants_mapping',
    ):
    config[item] = conf.get( 'Main', item )

# setup logging
debugLevels = { 'INFO': logging.INFO, 'DEBUG': logging.DEBUG }
logging.basicConfig( filename=os.path.expanduser(config['logfile_path']), filemode='a', level=debugLevels[config['debug_level']], format="%(asctime)s %(levelname)s %(message)s", datefmt='%c')
logging.info('extraction of records started')
loggedconf = copy.copy(config)
# do not log tokens
loggedconf['password'] = dummy
logging.debug( 'configuration: %s' % pprint.pformat( loggedconf ) )


# get spooled urs
extract = get_spooled_urs( config )

# timestamp pass
lastrun = last_run(config)
timestamp_lastrun(config)

voms_mapping = get_tenants_mapping( config )

# loop over configured tenants
tenants = config['tenants'].split(',')
for tenant in tenants:

    (nova_url, keystone_admin_url, token, tenant_id) = get_access_details(config['keystone_api_url'] ,config['user'], config['password'], tenant)
    if nova_url == None or token == None or tenant_id == None:
        logging.error("skipping tenant <%s> usage records" % tenant)
        continue

    urlp = urlparse.urlparse( nova_url )
    url = urlp[1]
    url_path = urlp[2]
    headers = { "X-Auth-Token": token, "Content-type":"application/json" }
    if urlp[0] == "https":
        conn = httplib.HTTPSConnection( url )
    else:
        conn = httplib.HTTPConnection( url )
    logging.debug('initiating connection to %s' % url)

    logging.debug( 'extracting accounting for tenant %s' % tenant )

    # get instances details for changed status servers since last pass
    changed_details = get_json_response( conn, "%s/servers/detail" % url_path, { "changes-since": lastrun }, headers ) 
    logging.debug('details of servers changed since %s: %s' % (lastrun, changed_details))

    # get instances usages since the oldest VM creation time
    oldest_creation = oldest_vm_start( config, extract, lastrun )
    end = datetime.datetime.utcnow() + datetime.timedelta(days=1)
    logging.debug( 'extracting records since: %s (oldest accounted VM)' % oldest_creation )
    usages = get_json_response( conn, "%s/os-simple-tenant-usage/%s" % ( url_path, tenant_id ), { "start": oldest_creation, "end": end.strftime("%Y-%m-%d %H:%M:%S.%f") }, headers )
    logging.debug('usages since oldest creation: %s' % usages)

    # get images ids/names available to that user
    images = get_images_ids( conn, tenant_id, changed_details, headers, url_path )

    # get users ids/names
    users = get_user_names(keystone_admin_url, token)

    # get vo
    try:
        vo = voms_mapping[tenant]
        logging.debug('found VO <%s> mapped to tenant <%s>' % (vo, tenant))
    except:
        logging.debug('unable to find a VO for tenant <%s>' % tenant)
        vo = nullValue
    

    # translate ids
    compute_extract( usages, changed_details, config, images, users, vo, tenant, extract )


logging.debug('closing connection')
conn.close()

# write usage records to spool file
write_to_spool( extract, config )
